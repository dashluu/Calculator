fun cmp(obj: MathObj): Int {
        if (preced < obj.preced) return -1
        else if (preced == obj.preced) return 0
        return 1
    }



mathObj.cmp(operatorStack.last()) >= 0





package com.example.calculator

import kotlin.collections.ArrayDeque
import kotlin.math.pow

class MathEngine {
    private val tokenQueue = ArrayDeque<MathObj>()
    private val postfixQueue = ArrayDeque<MathObj>()
    private val operatorStack = ArrayDeque<MathObj>()
    private val evalStack = ArrayDeque<MathObj>()

    companion object Expr {
        private val operatorSet = mapOf(
            "(" to MathObj("(", MathObj.Type.OPEN_PAREN.flag, 1),
            ")" to MathObj(")", MathObj.Type.CLOSE_PAREN.flag, 1),
            "√(" to MathObj("√(", MathObj.Type.UN_OP.flag or MathObj.Type.OPEN_PAREN.flag, 1),
            "!" to MathObj("!", MathObj.Type.UN_OP.flag, 2),
            "^" to MathObj("^", MathObj.Type.BIN_OP.flag, 3) { operand1: Double, operand2: Double ->
                operand1.pow(operand2)
            },
            "×" to MathObj("×", MathObj.Type.BIN_OP.flag, 4) { operand1: Double, operand2: Double ->
                operand1 * operand2
            },
            "÷" to MathObj("÷", MathObj.Type.BIN_OP.flag, 4) { operand1: Double, operand2: Double ->
                operand1 / operand2
            },
            "+" to MathObj("+", MathObj.Type.BIN_OP.flag, 5) { operand1: Double, operand2: Double ->
                operand1 + operand2
            },
            "-" to MathObj("-", MathObj.Type.BIN_OP.flag, 5) { operand1: Double, operand2: Double ->
                operand1 - operand2
            }
        )
    }

    private fun getOperator(str: String): MathObj {
        return operatorSet.getValue(str)
    }

    fun eval(inputStack: ArrayDeque<String>): String {
        clearResource()
        parse(inputStack)
        transformToPostfix()
        return evalPostfix()
    }

    private fun clearResource() {
        tokenQueue.clear()
        postfixQueue.clear()
        operatorStack.clear()
        evalStack.clear()
    }

    private fun isNumComp(input: Char): Boolean {
        return input.isDigit() || input == '.'
    }

    private fun parse(inputStack: ArrayDeque<String>) {
        var token = ""
        var currMathObj: MathObj

        for (str in inputStack) {
            if (isNumComp(str[0]))
                token += str
            else {
                if (token.isNotEmpty()) {
                    currMathObj = MathObj(token, MathObj.Type.NUMBER.flag, 0)
                    tokenQueue.addLast(currMathObj)
                }
                currMathObj = getOperator(str)
                tokenQueue.addLast(currMathObj)
                token = ""
            }
        }

        if (token.isNotEmpty()) {
            currMathObj = MathObj(token, MathObj.Type.NUMBER.flag, 0)
            tokenQueue.addLast(currMathObj)
        }
    }

    @Throws(SyntaxError::class)
    private fun transformToPostfix() {
        // Initialize stack and queue
        var top: MathObj
        var openParenFlag: Boolean

        for (mathObj in tokenQueue) {
            if (mathObj.isOperator() && !mathObj.isOpenParen()) {
                /*
                If the current string is an operator, compare it to the top of the stack.
                If its precedence is lower or equal to that of stack top, pop the stack
                until it is empty or an open parenthesis is encountered and then push the
                operator onto the stack.
                 */
                while (operatorStack.isNotEmpty()
                    && !operatorStack.last().isOpenParen()
                    && mathObj >= operatorStack.last()
                ) {
                    top = operatorStack.removeLast()
                    postfixQueue.addLast(top)
                }
                operatorStack.addLast(mathObj)
            } else if (mathObj.isOpenParen()) {
                // An open parenthesis signifies a new scope.
                operatorStack.addLast(mathObj)
            } else if (mathObj.isCloseParen()) {
                /*
                If a close parenthesis is encountered, enqueue whatever is popped from
                the stack until an open parenthesis is discarded.
                 */
                openParenFlag = false
                while (operatorStack.isNotEmpty() && !openParenFlag) {
                    top = operatorStack.removeLast()
                    if (top.isOperator())
                        postfixQueue.addLast(top)
                    if (top.isOpenParen())
                        openParenFlag = true
                }
                // Throw an exception if an open parenthesis is missing.
                if (!openParenFlag) throw SyntaxError()
            } else {
                // Simply enqueue operands.
                postfixQueue.addLast(mathObj)
            }
        }

        // Enqueue strings that are popped from the stack
        while (operatorStack.isNotEmpty()) {
            top = operatorStack.removeLast()
            postfixQueue.addLast(top)
        }
    }

    @Throws(SyntaxError::class)
    private fun evalPostfix(): String {
        var top: MathObj
        var operand1: Double?
        var operand2: Double?
        var result: MathObj

        while (postfixQueue.isNotEmpty()) {
            top = postfixQueue.removeFirst()
            if (top.isBinOp()) {
                /*
                If the operator is a binary operator, pop two operands and execute the
                binary operation.
                 */
                // Check if the stack is empty and throw an exception if it is.
                if (evalStack.isEmpty()) throw SyntaxError()
                operand2 = evalStack.removeLast().getStr().toDoubleOrNull()
                // Check if whatever is popped from the stack is numeric.
                if (operand2 == null) throw SyntaxError()
                // Check if the stack is empty and throw an exception if it is.
                if (evalStack.isEmpty()) throw SyntaxError()
                operand1 = evalStack.removeLast().getStr().toDoubleOrNull()
                // Check if whatever is popped from the stack is numeric.
                if (operand1 == null) throw SyntaxError()
                result = evalOperation(operand1, operand2, top.getStr())
                evalStack.addLast(result)
            } else if (top.isUnOp()) {
                /*
                If the operator is a unary operator, pop one operand and execute the
                unary operation.
                 */
                // Check if the stack is empty and throw an exception if it is.
                if (evalStack.isEmpty()) throw SyntaxError()
                operand1 = evalStack.removeLast().getStr().toDoubleOrNull()
                // Check if whatever is popped from the stack is numeric.
                if (operand1 == null) throw SyntaxError()
                result = evalOperation(operand1, 0.0, top.getStr())
                evalStack.addLast(result)
            } else {
                operand1 = top.getStr().toDoubleOrNull()
                // Check if the math object is a proper number.
                if (operand1 == null) throw SyntaxError()
                evalStack.addLast(top)
            }
        }

        if (evalStack.isEmpty()) return "0"
        return processResult(evalStack.removeLast().getStr())
    }

    private fun processResult(result: String): String {
        return result
    }

    private fun evalOperation(operand1: Double, operator2: Double, operator: String): MathObj {
        val result: Double = when (operator) {
            "+" -> operand1 + operator2
            "-" -> operand1 - operator2
            "×" -> operand1 * operator2
            "÷" -> operand1 / operator2
            else -> 0.0
        }
        return MathObj(result.toString(), MathObj.Type.NUMBER.flag, 0)
    }
}















package com.example.calculator

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import com.example.calculator.databinding.FragmentSimpleCalculatorBinding

/**
 * A simple [Fragment] subclass.
 * Use the [SimpleCalculator.newInstance] factory method to
 * create an instance of this fragment.
 */
class SimpleCalculator : Fragment() {
    // TODO: create inputSeq as a list.
    // TODO: consider creating EditMode and ErrorMode as subclasses of Mode.
    // TODO: consider saving the current state before switching.
    private enum class Mode { EDIT, ERROR }

    private lateinit var binding: FragmentSimpleCalculatorBinding
    private val inputSeq = ArrayDeque<String>()
    private val mathEngine = MathEngine()
    private var mode = Mode.EDIT
    private var recentInput = ""

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding =
            DataBindingUtil.inflate(inflater, R.layout.fragment_simple_calculator, container, false)

        binding.apply {
            zeroBtn.setOnClickListener { mapBtnInput("0") }
            oneBtn.setOnClickListener { mapBtnInput("1") }
            twoBtn.setOnClickListener { mapBtnInput("2") }
            threeBtn.setOnClickListener { mapBtnInput("3") }
            fourBtn.setOnClickListener { mapBtnInput("4") }
            fiveBtn.setOnClickListener { mapBtnInput("5") }
            sixBtn.setOnClickListener { mapBtnInput("6") }
            sevenBtn.setOnClickListener { mapBtnInput("7") }
            eightBtn.setOnClickListener { mapBtnInput("8") }
            nineBtn.setOnClickListener { mapBtnInput("9") }
            decimalPointBtn.setOnClickListener { mapBtnInput(".") }
            openParenthesisBtn.setOnClickListener { mapBtnInput("(") }
            closeParenthesisBtn.setOnClickListener { mapBtnInput(")") }
            factorialBtn.setOnClickListener { mapBtnInput("!") }
            addBtn.setOnClickListener { mapBtnInput("+") }
            subtractBtn.setOnClickListener { mapBtnInput("-") }
            multiplyBtn.setOnClickListener { mapBtnInput("×") }
            divideBtn.setOnClickListener { mapBtnInput("÷") }
            powerBtn.setOnClickListener { mapBtnInput("^") }
            sqrtBtn.setOnClickListener { mapBtnInput("√(") }
            clearEntryBtn.setOnClickListener { clearEntry() }
            clearAllBtn.setOnClickListener { clearAll() }
            equalBtn.setOnClickListener { showResult() }
        }

        return binding.root
    }

    private fun mapBtnInput(input: String) {
        inputSeq.addLast(input)
        recentInput += input
        binding.exprInput.text = recentInput
    }

    private fun clearEntry() {
        if (recentInput.isEmpty()) return
        val lastNumChars = inputSeq.removeLast().length
        recentInput = recentInput.substring(0, recentInput.length - lastNumChars)
        binding.exprInput.text = recentInput
    }

    private fun clearAll() {
        if (mode == Mode.EDIT) {
            inputSeq.clear()
            recentInput = ""
        } else mode = Mode.EDIT
        binding.exprInput.text = recentInput
    }

    private fun showResult() {
        try {
            val result = mathEngine.eval(inputSeq)
            inputSeq.clear()
            for (c in result)
                inputSeq.addLast(c.toString())
            recentInput = result
            binding.exprInput.text = recentInput
        } catch (exception: SyntaxError) {
            binding.exprInput.text = exception.message
            mode = Mode.ERROR
        }
    }
}



private class EditState(str: String) : State(str, StateType.EDIT)
    private class ErrorState() : State(SyntaxError.message)


private val editState: State = State("", StateType.EDIT)
    private val errorState: State = State(SyntaxError.message, StateType.ERROR)
    private 


private enum class StateType { EDIT, ERROR }
    private open class State(var str: String, val type: StateType)