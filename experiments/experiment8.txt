fun logEInt(xVal: BigDecimal): BigDecimal {
        // Assume xVal is a positive integer.
        if (xVal < M_TEN)
            return M_LOG_E_TEN + logECenterOne(M_ONE - (M_TEN - xVal) / M_TEN)
        else if (xVal.compareTo(M_TEN) == 0)
            return M_LOG_E_TEN
        var tmpVal = xVal
        var tenPow = 0
        while (tmpVal > M_TEN) {
            tmpVal = tmpVal.divideToIntegralValue(M_TEN)
            ++tenPow
        }
        val powTen = M_TEN.pow(tenPow)
        val tenPowDec = BigDecimal(tenPow)
        return tenPowDec * M_LOG_E_TEN + logECenterOne(M_ONE + (xVal - powTen) / powTen)
    }

    fun logE(xVal: BigDecimal): BigDecimal {
        // Assume xVal is a positive real number.
        val xInt = xVal.toBigInteger().toBigDecimal().fracScale()
        return logEInt(xInt) + logECenterOne(M_ONE + (xVal - xInt) / xInt)
    }

    fun posBasePow(baseVal: BigDecimal, powVal: BigDecimal): BigDecimal {
        // Assume baseVal is a positive real number.
        return exp(powVal * logE(baseVal))
    }




@Test
    fun logEInt_isCorrect() {
        assertEquals(
            BigDecimal("1.098612289").fracScale(),
            coreMath.logE(BigDecimal("3")).fracScale()
        )
    }






return tenPowDec * M_LOG_E_TEN + logECenterOne(M_ONE + (xVal - powTen) / powTen)




return tmpVal * tenPowDec * M_LOG_E_TEN + logECenterOne(M_ONE + (xVal - powTen) / powTen)







if (xVal < M_TEN)
            return M_LOG_E_TEN + logECenterOne(M_ONE - (M_TEN - xVal) / M_TEN)
        else if (xVal.compareTo(M_TEN) == 0)
            return M_LOG_E_TEN
        var tmpVal = xVal
        var tenPow = 0
        while (tmpVal > M_TEN) {
            tmpVal = tmpVal.divideToIntegralValue(M_TEN)
            ++tenPow
        }
        val powTen = M_TEN.pow(tenPow)
        val tenPowDec = tenPow.toBigDecimal()
        return tmpVal * tenPowDec * M_LOG_E_TEN



coreMath.posBasePow(BigDecimal("3"), BigDecimal("3")).fracScale()



i <= MAX_TAYLOR_TERMS && 









fun exp(xVal: BigDecimal): BigDecimal {
        var i = 0
        var xPow = M_ONE
        var fact = M_ONE
        var result = M_ZERO
        val upper = M_E.pow(xVal.toInt() + 1)

        while (!testPrecision(upper, xVal, M_ZERO, i, fact)) {
            result += xPow / fact
            xPow *= xVal
            fact *= BigDecimal(i + 1)
            ++i
        }

        return result
    }

    fun logECenterOne(xVal: BigDecimal): BigDecimal {
        // Assume that 0 < xVal < 2.
        var i = 1
        var altSign = M_ONE
        var result = M_ZERO
        val xFrac = xVal - M_ONE

        while ((xFrac.abs().pow(i) / BigDecimal(i)).fracScale() > M_ZERO) {
            result += altSign * xFrac.pow(i) / BigDecimal(i)
            altSign = -altSign
            ++i
        }

        return result
    }

    fun logE(xVal: BigDecimal): BigDecimal {
        // Assume xVal is a positive real number.
        var tmpVal = xVal
        var tenPow = 0
        while (tmpVal > M_ZERO) {
            tmpVal = tmpVal.divideToIntegralValue(M_TEN)
            ++tenPow
        }
        val powTen = M_TEN.pow(tenPow)
        val tenPowDec = tenPow.toBigDecimal()
        return tenPowDec * M_LOG_E_TEN + logECenterOne(M_ONE - (powTen - xVal) / powTen)
    }

    fun posBasePow(baseVal: BigDecimal, powVal: BigDecimal): BigDecimal {
        // Assume baseVal is a positive real number.
        return exp(powVal * logE(baseVal))
    }




fun add(num1: BigDecimal, num2: BigDecimal) {
        return num1.
    }





















package com.example.calculator

import java.math.BigDecimal
import java.math.RoundingMode
import java.text.DecimalFormat
import kotlin.math.PI
import kotlin.math.E
import kotlin.math.log

fun BigDecimal.fracScale(): BigDecimal {
    return setScale(CoreMath.MAX_FRAC_DIGITS, CoreMath.ROUNDING_MODE)
}

class CoreMath {

    private enum class RadMode { RAD, DEG }

    private var radMode = RadMode.RAD

    private val operatorSet = arrayOf(
        MathObj("-(", MathObj.Type.UN_OP.flag or MathObj.Type.OPEN_PAREN.flag, 1)
        { operand1: BigDecimal, _: BigDecimal -> -operand1 },
        MathObj("(", MathObj.Type.OPEN_PAREN.flag, 1),
        MathObj(")", MathObj.Type.CLOSE_PAREN.flag, 1),
        MathObj("√(", MathObj.Type.UN_OP.flag or MathObj.Type.OPEN_PAREN.flag, 1),
        MathObj("!", MathObj.Type.UN_OP.flag, 2),
        MathObj("^", MathObj.Type.BIN_OP.flag, 3),
        MathObj("×", MathObj.Type.BIN_OP.flag, 4)
        { operand1: BigDecimal, operand2: BigDecimal -> operand1 * operand2 },
        MathObj("÷", MathObj.Type.BIN_OP.flag, 4)
        { operand1: BigDecimal, operand2: BigDecimal -> operand1 / operand2 },
        MathObj("+", MathObj.Type.BIN_OP.flag, 5)
        { operand1: BigDecimal, operand2: BigDecimal -> operand1 + operand2 },
        MathObj("-", MathObj.Type.BIN_OP.flag, 5)
        { operand1: BigDecimal, operand2: BigDecimal -> operand1 - operand2 }
    )

    companion object {
        const val MIN_FRAC_DIGITS = 9
        const val MAX_FRAC_DIGITS = 10
        val ROUNDING_MODE = RoundingMode.HALF_UP
        const val MAX_TAYLOR_TERMS = 50
        val M_ZERO: BigDecimal = BigDecimal.ZERO.fracScale()
        val M_ONE: BigDecimal = BigDecimal.ONE.fracScale()
        val M_TEN: BigDecimal = BigDecimal.TEN.fracScale()
        val M_PI = BigDecimal(PI).fracScale()
        val M_DEG = BigDecimal(180).fracScale()
        val M_E = BigDecimal(E).fracScale()
        val M_LOG_E_TEN = BigDecimal(log(10.0, E)).fracScale()
    }

    init {
        // Sort the operator set to use binary search later.
        operatorSet.sortBy { it.str }
    }

    fun getOperator(str: String): MathObj? {
        var low = 0
        var high = operatorSet.size
        var mid: Int
        // Use binary search to find the operator in the set.
        while (low <= high) {
            mid = (low + high) / 2
            when {
                str == operatorSet[mid].str -> return operatorSet[mid]
                str < operatorSet[mid].str -> high = mid - 1
                else -> low = mid + 1
            }
        }
        // If the operator is not found, return null, although this never happens.
        return null
    }

    fun formatResult(result: BigDecimal): String {
        val decFormat = DecimalFormat()
        decFormat.maximumFractionDigits = MIN_FRAC_DIGITS
        decFormat.minimumFractionDigits = 0
        decFormat.roundingMode = ROUNDING_MODE
        decFormat.isGroupingUsed = false
        return decFormat.format(result)
    }

    private fun degToRad(deg: BigDecimal): BigDecimal {
        return (deg * M_PI) / M_DEG
    }

    private fun zeroPow(xVal: BigDecimal): BigDecimal {
        if (xVal < M_ZERO) throw SyntaxError()
        else if (xVal > M_ZERO) return M_ZERO
        return M_ONE
    }

    private fun add(num1: BigDecimal, num2: BigDecimal): BigDecimal {
        return num1.fracScale() + num2.fracScale()
    }

    private fun subtract(num1: BigDecimal, num2: BigDecimal): BigDecimal {
        return num1.fracScale() - num2.fracScale()
    }

    private fun mult(num1: BigDecimal, num2: BigDecimal): BigDecimal {
        return num1.fracScale() * num2.fracScale()
    }

    private fun div(num1: BigDecimal, num2: BigDecimal): BigDecimal {
        return num1.fracScale() / num2.fracScale()
    }

    private fun pow(num1: BigDecimal, num2: Int): BigDecimal {
        return num1.fracScale().pow(num2).fracScale()
    }

    private fun testPrecision(
        mVal: BigDecimal, xVal: BigDecimal, aVal: BigDecimal,
        nVal: Int, fact: BigDecimal
    ): Boolean {
        return div(mult(mVal, pow((xVal - aVal).abs(), nVal)), fact) == M_ZERO
    }

    fun exp(xVal: BigDecimal): BigDecimal {
        var i = 0
        var xPow = M_ONE
        var fact = M_ONE
        var result = M_ZERO
        val upper = pow(M_TEN, xVal.toInt() + 1)

        while (!testPrecision(upper, xVal, M_ZERO, i, fact)) {
            result = add(result, div(xPow, fact))
            xPow = mult(xPow, xVal)
            fact = mult(fact, BigDecimal(i + 1))
            ++i
        }

        return result
    }

    fun logECenterOne(xVal: BigDecimal): BigDecimal {
        // Assume that 0 < xVal < 2.
        var i = 1
        var altSign = M_ONE
        var result = M_ZERO
        val xFrac = subtract(xVal, M_ONE)

        while (div(pow(xFrac.abs(), i), BigDecimal(i)) > M_ZERO) {
            result = add(result, div(mult(altSign, pow(xFrac, i)), BigDecimal(i)))
            altSign = -altSign
            ++i
        }

        return result
    }

    fun logE(xVal: BigDecimal): BigDecimal {
        // Assume xVal is a positive real number.
        var tmpVal = xVal
        var tenPow = 0
        while (tmpVal > M_ZERO) {
            tmpVal = tmpVal.divideToIntegralValue(M_TEN)
            ++tenPow
        }
        val powTen = pow(M_TEN, tenPow)
        val tenPowDec = tenPow.toBigDecimal()
        return add(
            mult(tenPowDec, M_LOG_E_TEN),
            logECenterOne(subtract(M_ONE, div(subtract(powTen, xVal), powTen)))
        )
    }

    fun posBasePow(baseVal: BigDecimal, powVal: BigDecimal): BigDecimal {
        // Assume baseVal is a positive real number.
        return exp(powVal * logE(baseVal))
    }
}